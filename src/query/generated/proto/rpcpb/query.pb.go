// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/query/generated/proto/rpcpb/query.proto

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
	Package rpcpb is a generated protocol buffer package.

	It is generated from these files:
		github.com/m3db/m3/src/query/generated/proto/rpcpb/query.proto

	It has these top-level messages:
		FetchRequest
		TagMatchers
		TagMatcher
		FetchResponse
		Series
		SeriesMetadata
		DecompressedSeries
		Datapoint
		Tag
		M3CompressedSeries
		M3CompressedValuesReplica
		M3Segments
		M3Segment
		SearchRequestOptions
		SearchRequest
		M3TagProperty
		M3TagProperties
		TagProperty
		TagProperties
		SearchResponse
		CompleteTagsRequest
		CompleteTagsResponse
*/
package rpcpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MatcherType int32

const (
	MatcherType_EQUAL     MatcherType = 0
	MatcherType_NOTEQUAL  MatcherType = 1
	MatcherType_REGEXP    MatcherType = 2
	MatcherType_NOTREGEXP MatcherType = 3
	// EXISTS and NOTEXISTS apply only to
	// matcher name rather than value
	MatcherType_EXISTS    MatcherType = 4
	MatcherType_NOTEXISTS MatcherType = 5
)

var MatcherType_name = map[int32]string{
	0: "EQUAL",
	1: "NOTEQUAL",
	2: "REGEXP",
	3: "NOTREGEXP",
	4: "EXISTS",
	5: "NOTEXISTS",
}
var MatcherType_value = map[string]int32{
	"EQUAL":     0,
	"NOTEQUAL":  1,
	"REGEXP":    2,
	"NOTREGEXP": 3,
	"EXISTS":    4,
	"NOTEXISTS": 5,
}

func (x MatcherType) String() string {
	return proto.EnumName(MatcherType_name, int32(x))
}
func (MatcherType) EnumDescriptor() ([]byte, []int) { return fileDescriptorQuery, []int{0} }

type SearchType int32

const (
	// Requests tag names and values
	SearchType_DEFAULT SearchType = 0
	// Requests tag names only
	SearchType_TAGNAME SearchType = 1
)

var SearchType_name = map[int32]string{
	0: "DEFAULT",
	1: "TAGNAME",
}
var SearchType_value = map[string]int32{
	"DEFAULT": 0,
	"TAGNAME": 1,
}

func (x SearchType) String() string {
	return proto.EnumName(SearchType_name, int32(x))
}
func (SearchType) EnumDescriptor() ([]byte, []int) { return fileDescriptorQuery, []int{1} }

type FetchRequest struct {
	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	// Types that are valid to be assigned to Matchers:
	//	*FetchRequest_TagMatchers
	Matchers isFetchRequest_Matchers `protobuf_oneof:"matchers"`
}

func (m *FetchRequest) Reset()                    { *m = FetchRequest{} }
func (m *FetchRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchRequest) ProtoMessage()               {}
func (*FetchRequest) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{0} }

type isFetchRequest_Matchers interface {
	isFetchRequest_Matchers()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FetchRequest_TagMatchers struct {
	TagMatchers *TagMatchers `protobuf:"bytes,3,opt,name=tagMatchers,oneof"`
}

func (*FetchRequest_TagMatchers) isFetchRequest_Matchers() {}

func (m *FetchRequest) GetMatchers() isFetchRequest_Matchers {
	if m != nil {
		return m.Matchers
	}
	return nil
}

func (m *FetchRequest) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *FetchRequest) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *FetchRequest) GetTagMatchers() *TagMatchers {
	if x, ok := m.GetMatchers().(*FetchRequest_TagMatchers); ok {
		return x.TagMatchers
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FetchRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FetchRequest_OneofMarshaler, _FetchRequest_OneofUnmarshaler, _FetchRequest_OneofSizer, []interface{}{
		(*FetchRequest_TagMatchers)(nil),
	}
}

func _FetchRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FetchRequest)
	// matchers
	switch x := m.Matchers.(type) {
	case *FetchRequest_TagMatchers:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TagMatchers); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FetchRequest.Matchers has unexpected type %T", x)
	}
	return nil
}

func _FetchRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FetchRequest)
	switch tag {
	case 3: // matchers.tagMatchers
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TagMatchers)
		err := b.DecodeMessage(msg)
		m.Matchers = &FetchRequest_TagMatchers{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FetchRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FetchRequest)
	// matchers
	switch x := m.Matchers.(type) {
	case *FetchRequest_TagMatchers:
		s := proto.Size(x.TagMatchers)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TagMatchers struct {
	TagMatchers []*TagMatcher `protobuf:"bytes,1,rep,name=tagMatchers" json:"tagMatchers,omitempty"`
}

func (m *TagMatchers) Reset()                    { *m = TagMatchers{} }
func (m *TagMatchers) String() string            { return proto.CompactTextString(m) }
func (*TagMatchers) ProtoMessage()               {}
func (*TagMatchers) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{1} }

func (m *TagMatchers) GetTagMatchers() []*TagMatcher {
	if m != nil {
		return m.TagMatchers
	}
	return nil
}

type TagMatcher struct {
	Name  []byte      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value []byte      `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Type  MatcherType `protobuf:"varint,3,opt,name=type,proto3,enum=rpc.MatcherType" json:"type,omitempty"`
}

func (m *TagMatcher) Reset()                    { *m = TagMatcher{} }
func (m *TagMatcher) String() string            { return proto.CompactTextString(m) }
func (*TagMatcher) ProtoMessage()               {}
func (*TagMatcher) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{2} }

func (m *TagMatcher) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *TagMatcher) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TagMatcher) GetType() MatcherType {
	if m != nil {
		return m.Type
	}
	return MatcherType_EQUAL
}

type FetchResponse struct {
	Series []*Series `protobuf:"bytes,1,rep,name=series" json:"series,omitempty"`
}

func (m *FetchResponse) Reset()                    { *m = FetchResponse{} }
func (m *FetchResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchResponse) ProtoMessage()               {}
func (*FetchResponse) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{3} }

func (m *FetchResponse) GetSeries() []*Series {
	if m != nil {
		return m.Series
	}
	return nil
}

type Series struct {
	Meta *SeriesMetadata `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*Series_Decompressed
	//	*Series_Compressed
	Value isSeries_Value `protobuf_oneof:"value"`
}

func (m *Series) Reset()                    { *m = Series{} }
func (m *Series) String() string            { return proto.CompactTextString(m) }
func (*Series) ProtoMessage()               {}
func (*Series) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{4} }

type isSeries_Value interface {
	isSeries_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Series_Decompressed struct {
	Decompressed *DecompressedSeries `protobuf:"bytes,2,opt,name=decompressed,oneof"`
}
type Series_Compressed struct {
	Compressed *M3CompressedSeries `protobuf:"bytes,3,opt,name=compressed,oneof"`
}

func (*Series_Decompressed) isSeries_Value() {}
func (*Series_Compressed) isSeries_Value()   {}

func (m *Series) GetValue() isSeries_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Series) GetMeta() *SeriesMetadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Series) GetDecompressed() *DecompressedSeries {
	if x, ok := m.GetValue().(*Series_Decompressed); ok {
		return x.Decompressed
	}
	return nil
}

func (m *Series) GetCompressed() *M3CompressedSeries {
	if x, ok := m.GetValue().(*Series_Compressed); ok {
		return x.Compressed
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Series) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Series_OneofMarshaler, _Series_OneofUnmarshaler, _Series_OneofSizer, []interface{}{
		(*Series_Decompressed)(nil),
		(*Series_Compressed)(nil),
	}
}

func _Series_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Series)
	// value
	switch x := m.Value.(type) {
	case *Series_Decompressed:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Decompressed); err != nil {
			return err
		}
	case *Series_Compressed:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Compressed); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Series.Value has unexpected type %T", x)
	}
	return nil
}

func _Series_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Series)
	switch tag {
	case 2: // value.decompressed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DecompressedSeries)
		err := b.DecodeMessage(msg)
		m.Value = &Series_Decompressed{msg}
		return true, err
	case 3: // value.compressed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(M3CompressedSeries)
		err := b.DecodeMessage(msg)
		m.Value = &Series_Compressed{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Series_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Series)
	// value
	switch x := m.Value.(type) {
	case *Series_Decompressed:
		s := proto.Size(x.Decompressed)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Series_Compressed:
		s := proto.Size(x.Compressed)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SeriesMetadata struct {
	Id        []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StartTime int64  `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   int64  `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (m *SeriesMetadata) Reset()                    { *m = SeriesMetadata{} }
func (m *SeriesMetadata) String() string            { return proto.CompactTextString(m) }
func (*SeriesMetadata) ProtoMessage()               {}
func (*SeriesMetadata) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{5} }

func (m *SeriesMetadata) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SeriesMetadata) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *SeriesMetadata) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type DecompressedSeries struct {
	Datapoints []*Datapoint `protobuf:"bytes,1,rep,name=datapoints" json:"datapoints,omitempty"`
	Tags       []*Tag       `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
}

func (m *DecompressedSeries) Reset()                    { *m = DecompressedSeries{} }
func (m *DecompressedSeries) String() string            { return proto.CompactTextString(m) }
func (*DecompressedSeries) ProtoMessage()               {}
func (*DecompressedSeries) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{6} }

func (m *DecompressedSeries) GetDatapoints() []*Datapoint {
	if m != nil {
		return m.Datapoints
	}
	return nil
}

func (m *DecompressedSeries) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Datapoint struct {
	Timestamp int64   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Value     float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Datapoint) Reset()                    { *m = Datapoint{} }
func (m *Datapoint) String() string            { return proto.CompactTextString(m) }
func (*Datapoint) ProtoMessage()               {}
func (*Datapoint) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{7} }

func (m *Datapoint) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Datapoint) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Tag struct {
	Name  []byte `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{8} }

func (m *Tag) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Tag) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type M3CompressedSeries struct {
	CompressedTags []byte                       `protobuf:"bytes,1,opt,name=compressedTags,proto3" json:"compressedTags,omitempty"`
	Replicas       []*M3CompressedValuesReplica `protobuf:"bytes,2,rep,name=replicas" json:"replicas,omitempty"`
}

func (m *M3CompressedSeries) Reset()                    { *m = M3CompressedSeries{} }
func (m *M3CompressedSeries) String() string            { return proto.CompactTextString(m) }
func (*M3CompressedSeries) ProtoMessage()               {}
func (*M3CompressedSeries) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{9} }

func (m *M3CompressedSeries) GetCompressedTags() []byte {
	if m != nil {
		return m.CompressedTags
	}
	return nil
}

func (m *M3CompressedSeries) GetReplicas() []*M3CompressedValuesReplica {
	if m != nil {
		return m.Replicas
	}
	return nil
}

type M3CompressedValuesReplica struct {
	Segments []*M3Segments `protobuf:"bytes,1,rep,name=segments" json:"segments,omitempty"`
}

func (m *M3CompressedValuesReplica) Reset()                    { *m = M3CompressedValuesReplica{} }
func (m *M3CompressedValuesReplica) String() string            { return proto.CompactTextString(m) }
func (*M3CompressedValuesReplica) ProtoMessage()               {}
func (*M3CompressedValuesReplica) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{10} }

func (m *M3CompressedValuesReplica) GetSegments() []*M3Segments {
	if m != nil {
		return m.Segments
	}
	return nil
}

type M3Segments struct {
	Merged   *M3Segment   `protobuf:"bytes,1,opt,name=merged" json:"merged,omitempty"`
	Unmerged []*M3Segment `protobuf:"bytes,2,rep,name=unmerged" json:"unmerged,omitempty"`
}

func (m *M3Segments) Reset()                    { *m = M3Segments{} }
func (m *M3Segments) String() string            { return proto.CompactTextString(m) }
func (*M3Segments) ProtoMessage()               {}
func (*M3Segments) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{11} }

func (m *M3Segments) GetMerged() *M3Segment {
	if m != nil {
		return m.Merged
	}
	return nil
}

func (m *M3Segments) GetUnmerged() []*M3Segment {
	if m != nil {
		return m.Unmerged
	}
	return nil
}

type M3Segment struct {
	Head      []byte `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Tail      []byte `protobuf:"bytes,2,opt,name=tail,proto3" json:"tail,omitempty"`
	StartTime int64  `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	BlockSize int64  `protobuf:"varint,4,opt,name=blockSize,proto3" json:"blockSize,omitempty"`
}

func (m *M3Segment) Reset()                    { *m = M3Segment{} }
func (m *M3Segment) String() string            { return proto.CompactTextString(m) }
func (*M3Segment) ProtoMessage()               {}
func (*M3Segment) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{12} }

func (m *M3Segment) GetHead() []byte {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *M3Segment) GetTail() []byte {
	if m != nil {
		return m.Tail
	}
	return nil
}

func (m *M3Segment) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *M3Segment) GetBlockSize() int64 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

type SearchRequestOptions struct {
	FilterNameTags [][]byte `protobuf:"bytes,1,rep,name=filterNameTags" json:"filterNameTags,omitempty"`
}

func (m *SearchRequestOptions) Reset()                    { *m = SearchRequestOptions{} }
func (m *SearchRequestOptions) String() string            { return proto.CompactTextString(m) }
func (*SearchRequestOptions) ProtoMessage()               {}
func (*SearchRequestOptions) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{13} }

func (m *SearchRequestOptions) GetFilterNameTags() [][]byte {
	if m != nil {
		return m.FilterNameTags
	}
	return nil
}

type SearchRequest struct {
	// Types that are valid to be assigned to Matchers:
	//	*SearchRequest_TagMatchers
	Matchers isSearchRequest_Matchers `protobuf_oneof:"matchers"`
	Type     SearchType               `protobuf:"varint,2,opt,name=type,proto3,enum=rpc.SearchType" json:"type,omitempty"`
	Options  *SearchRequestOptions    `protobuf:"bytes,3,opt,name=options" json:"options,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{14} }

type isSearchRequest_Matchers interface {
	isSearchRequest_Matchers()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SearchRequest_TagMatchers struct {
	TagMatchers *TagMatchers `protobuf:"bytes,1,opt,name=tagMatchers,oneof"`
}

func (*SearchRequest_TagMatchers) isSearchRequest_Matchers() {}

func (m *SearchRequest) GetMatchers() isSearchRequest_Matchers {
	if m != nil {
		return m.Matchers
	}
	return nil
}

func (m *SearchRequest) GetTagMatchers() *TagMatchers {
	if x, ok := m.GetMatchers().(*SearchRequest_TagMatchers); ok {
		return x.TagMatchers
	}
	return nil
}

func (m *SearchRequest) GetType() SearchType {
	if m != nil {
		return m.Type
	}
	return SearchType_DEFAULT
}

func (m *SearchRequest) GetOptions() *SearchRequestOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SearchRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SearchRequest_OneofMarshaler, _SearchRequest_OneofUnmarshaler, _SearchRequest_OneofSizer, []interface{}{
		(*SearchRequest_TagMatchers)(nil),
	}
}

func _SearchRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SearchRequest)
	// matchers
	switch x := m.Matchers.(type) {
	case *SearchRequest_TagMatchers:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TagMatchers); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SearchRequest.Matchers has unexpected type %T", x)
	}
	return nil
}

func _SearchRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SearchRequest)
	switch tag {
	case 1: // matchers.tagMatchers
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TagMatchers)
		err := b.DecodeMessage(msg)
		m.Matchers = &SearchRequest_TagMatchers{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SearchRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SearchRequest)
	// matchers
	switch x := m.Matchers.(type) {
	case *SearchRequest_TagMatchers:
		s := proto.Size(x.TagMatchers)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type M3TagProperty struct {
	Id             []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CompressedTags []byte `protobuf:"bytes,2,opt,name=compressedTags,proto3" json:"compressedTags,omitempty"`
}

func (m *M3TagProperty) Reset()                    { *m = M3TagProperty{} }
func (m *M3TagProperty) String() string            { return proto.CompactTextString(m) }
func (*M3TagProperty) ProtoMessage()               {}
func (*M3TagProperty) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{15} }

func (m *M3TagProperty) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *M3TagProperty) GetCompressedTags() []byte {
	if m != nil {
		return m.CompressedTags
	}
	return nil
}

type M3TagProperties struct {
	Properties []*M3TagProperty `protobuf:"bytes,1,rep,name=properties" json:"properties,omitempty"`
}

func (m *M3TagProperties) Reset()                    { *m = M3TagProperties{} }
func (m *M3TagProperties) String() string            { return proto.CompactTextString(m) }
func (*M3TagProperties) ProtoMessage()               {}
func (*M3TagProperties) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{16} }

func (m *M3TagProperties) GetProperties() []*M3TagProperty {
	if m != nil {
		return m.Properties
	}
	return nil
}

type TagProperty struct {
	Key    []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Values [][]byte `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
}

func (m *TagProperty) Reset()                    { *m = TagProperty{} }
func (m *TagProperty) String() string            { return proto.CompactTextString(m) }
func (*TagProperty) ProtoMessage()               {}
func (*TagProperty) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{17} }

func (m *TagProperty) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *TagProperty) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

type TagProperties struct {
	Properties []*TagProperty `protobuf:"bytes,1,rep,name=properties" json:"properties,omitempty"`
}

func (m *TagProperties) Reset()                    { *m = TagProperties{} }
func (m *TagProperties) String() string            { return proto.CompactTextString(m) }
func (*TagProperties) ProtoMessage()               {}
func (*TagProperties) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{18} }

func (m *TagProperties) GetProperties() []*TagProperty {
	if m != nil {
		return m.Properties
	}
	return nil
}

type SearchResponse struct {
	// Types that are valid to be assigned to Value:
	//	*SearchResponse_Decompressed
	//	*SearchResponse_Compressed
	Value isSearchResponse_Value `protobuf_oneof:"value"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{19} }

type isSearchResponse_Value interface {
	isSearchResponse_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SearchResponse_Decompressed struct {
	Decompressed *TagProperties `protobuf:"bytes,1,opt,name=decompressed,oneof"`
}
type SearchResponse_Compressed struct {
	Compressed *M3TagProperties `protobuf:"bytes,2,opt,name=compressed,oneof"`
}

func (*SearchResponse_Decompressed) isSearchResponse_Value() {}
func (*SearchResponse_Compressed) isSearchResponse_Value()   {}

func (m *SearchResponse) GetValue() isSearchResponse_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SearchResponse) GetDecompressed() *TagProperties {
	if x, ok := m.GetValue().(*SearchResponse_Decompressed); ok {
		return x.Decompressed
	}
	return nil
}

func (m *SearchResponse) GetCompressed() *M3TagProperties {
	if x, ok := m.GetValue().(*SearchResponse_Compressed); ok {
		return x.Compressed
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SearchResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SearchResponse_OneofMarshaler, _SearchResponse_OneofUnmarshaler, _SearchResponse_OneofSizer, []interface{}{
		(*SearchResponse_Decompressed)(nil),
		(*SearchResponse_Compressed)(nil),
	}
}

func _SearchResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SearchResponse)
	// value
	switch x := m.Value.(type) {
	case *SearchResponse_Decompressed:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Decompressed); err != nil {
			return err
		}
	case *SearchResponse_Compressed:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Compressed); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SearchResponse.Value has unexpected type %T", x)
	}
	return nil
}

func _SearchResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SearchResponse)
	switch tag {
	case 1: // value.decompressed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TagProperties)
		err := b.DecodeMessage(msg)
		m.Value = &SearchResponse_Decompressed{msg}
		return true, err
	case 2: // value.compressed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(M3TagProperties)
		err := b.DecodeMessage(msg)
		m.Value = &SearchResponse_Compressed{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SearchResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SearchResponse)
	// value
	switch x := m.Value.(type) {
	case *SearchResponse_Decompressed:
		s := proto.Size(x.Decompressed)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SearchResponse_Compressed:
		s := proto.Size(x.Compressed)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CompleteTagsRequest struct {
	Query   []byte                `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Type    SearchType            `protobuf:"varint,2,opt,name=type,proto3,enum=rpc.SearchType" json:"type,omitempty"`
	Options *SearchRequestOptions `protobuf:"bytes,3,opt,name=options" json:"options,omitempty"`
}

func (m *CompleteTagsRequest) Reset()                    { *m = CompleteTagsRequest{} }
func (m *CompleteTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*CompleteTagsRequest) ProtoMessage()               {}
func (*CompleteTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{20} }

func (m *CompleteTagsRequest) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *CompleteTagsRequest) GetType() SearchType {
	if m != nil {
		return m.Type
	}
	return SearchType_DEFAULT
}

func (m *CompleteTagsRequest) GetOptions() *SearchRequestOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type CompleteTagsResponse struct {
	// Types that are valid to be assigned to Value:
	//	*CompleteTagsResponse_Decompressed
	Value isCompleteTagsResponse_Value `protobuf_oneof:"value"`
}

func (m *CompleteTagsResponse) Reset()                    { *m = CompleteTagsResponse{} }
func (m *CompleteTagsResponse) String() string            { return proto.CompactTextString(m) }
func (*CompleteTagsResponse) ProtoMessage()               {}
func (*CompleteTagsResponse) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{21} }

type isCompleteTagsResponse_Value interface {
	isCompleteTagsResponse_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CompleteTagsResponse_Decompressed struct {
	Decompressed *TagProperties `protobuf:"bytes,1,opt,name=decompressed,oneof"`
}

func (*CompleteTagsResponse_Decompressed) isCompleteTagsResponse_Value() {}

func (m *CompleteTagsResponse) GetValue() isCompleteTagsResponse_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CompleteTagsResponse) GetDecompressed() *TagProperties {
	if x, ok := m.GetValue().(*CompleteTagsResponse_Decompressed); ok {
		return x.Decompressed
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CompleteTagsResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CompleteTagsResponse_OneofMarshaler, _CompleteTagsResponse_OneofUnmarshaler, _CompleteTagsResponse_OneofSizer, []interface{}{
		(*CompleteTagsResponse_Decompressed)(nil),
	}
}

func _CompleteTagsResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CompleteTagsResponse)
	// value
	switch x := m.Value.(type) {
	case *CompleteTagsResponse_Decompressed:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Decompressed); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CompleteTagsResponse.Value has unexpected type %T", x)
	}
	return nil
}

func _CompleteTagsResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CompleteTagsResponse)
	switch tag {
	case 1: // value.decompressed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TagProperties)
		err := b.DecodeMessage(msg)
		m.Value = &CompleteTagsResponse_Decompressed{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CompleteTagsResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CompleteTagsResponse)
	// value
	switch x := m.Value.(type) {
	case *CompleteTagsResponse_Decompressed:
		s := proto.Size(x.Decompressed)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*FetchRequest)(nil), "rpc.FetchRequest")
	proto.RegisterType((*TagMatchers)(nil), "rpc.TagMatchers")
	proto.RegisterType((*TagMatcher)(nil), "rpc.TagMatcher")
	proto.RegisterType((*FetchResponse)(nil), "rpc.FetchResponse")
	proto.RegisterType((*Series)(nil), "rpc.Series")
	proto.RegisterType((*SeriesMetadata)(nil), "rpc.SeriesMetadata")
	proto.RegisterType((*DecompressedSeries)(nil), "rpc.DecompressedSeries")
	proto.RegisterType((*Datapoint)(nil), "rpc.Datapoint")
	proto.RegisterType((*Tag)(nil), "rpc.Tag")
	proto.RegisterType((*M3CompressedSeries)(nil), "rpc.M3CompressedSeries")
	proto.RegisterType((*M3CompressedValuesReplica)(nil), "rpc.M3CompressedValuesReplica")
	proto.RegisterType((*M3Segments)(nil), "rpc.M3Segments")
	proto.RegisterType((*M3Segment)(nil), "rpc.M3Segment")
	proto.RegisterType((*SearchRequestOptions)(nil), "rpc.SearchRequestOptions")
	proto.RegisterType((*SearchRequest)(nil), "rpc.SearchRequest")
	proto.RegisterType((*M3TagProperty)(nil), "rpc.M3TagProperty")
	proto.RegisterType((*M3TagProperties)(nil), "rpc.M3TagProperties")
	proto.RegisterType((*TagProperty)(nil), "rpc.TagProperty")
	proto.RegisterType((*TagProperties)(nil), "rpc.TagProperties")
	proto.RegisterType((*SearchResponse)(nil), "rpc.SearchResponse")
	proto.RegisterType((*CompleteTagsRequest)(nil), "rpc.CompleteTagsRequest")
	proto.RegisterType((*CompleteTagsResponse)(nil), "rpc.CompleteTagsResponse")
	proto.RegisterEnum("rpc.MatcherType", MatcherType_name, MatcherType_value)
	proto.RegisterEnum("rpc.SearchType", SearchType_name, SearchType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Query service

type QueryClient interface {
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (Query_FetchClient, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (Query_SearchClient, error)
	CompleteTags(ctx context.Context, in *CompleteTagsRequest, opts ...grpc.CallOption) (Query_CompleteTagsClient, error)
}

type queryClient struct {
	cc *grpc.ClientConn
}

func NewQueryClient(cc *grpc.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (Query_FetchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Query_serviceDesc.Streams[0], c.cc, "/rpc.Query/Fetch", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryFetchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_FetchClient interface {
	Recv() (*FetchResponse, error)
	grpc.ClientStream
}

type queryFetchClient struct {
	grpc.ClientStream
}

func (x *queryFetchClient) Recv() (*FetchResponse, error) {
	m := new(FetchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (Query_SearchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Query_serviceDesc.Streams[1], c.cc, "/rpc.Query/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &querySearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_SearchClient interface {
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type querySearchClient struct {
	grpc.ClientStream
}

func (x *querySearchClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryClient) CompleteTags(ctx context.Context, in *CompleteTagsRequest, opts ...grpc.CallOption) (Query_CompleteTagsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Query_serviceDesc.Streams[2], c.cc, "/rpc.Query/CompleteTags", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryCompleteTagsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_CompleteTagsClient interface {
	Recv() (*CompleteTagsResponse, error)
	grpc.ClientStream
}

type queryCompleteTagsClient struct {
	grpc.ClientStream
}

func (x *queryCompleteTagsClient) Recv() (*CompleteTagsResponse, error) {
	m := new(CompleteTagsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Query service

type QueryServer interface {
	Fetch(*FetchRequest, Query_FetchServer) error
	Search(*SearchRequest, Query_SearchServer) error
	CompleteTags(*CompleteTagsRequest, Query_CompleteTagsServer) error
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Fetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).Fetch(m, &queryFetchServer{stream})
}

type Query_FetchServer interface {
	Send(*FetchResponse) error
	grpc.ServerStream
}

type queryFetchServer struct {
	grpc.ServerStream
}

func (x *queryFetchServer) Send(m *FetchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Query_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).Search(m, &querySearchServer{stream})
}

type Query_SearchServer interface {
	Send(*SearchResponse) error
	grpc.ServerStream
}

type querySearchServer struct {
	grpc.ServerStream
}

func (x *querySearchServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Query_CompleteTags_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CompleteTagsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).CompleteTags(m, &queryCompleteTagsServer{stream})
}

type Query_CompleteTagsServer interface {
	Send(*CompleteTagsResponse) error
	grpc.ServerStream
}

type queryCompleteTagsServer struct {
	grpc.ServerStream
}

func (x *queryCompleteTagsServer) Send(m *CompleteTagsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Query",
	HandlerType: (*QueryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fetch",
			Handler:       _Query_Fetch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Search",
			Handler:       _Query_Search_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CompleteTags",
			Handler:       _Query_CompleteTags_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/m3db/m3/src/query/generated/proto/rpcpb/query.proto",
}

func (m *FetchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Start != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.Start))
	}
	if m.End != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.End))
	}
	if m.Matchers != nil {
		nn1, err := m.Matchers.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *FetchRequest_TagMatchers) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TagMatchers != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.TagMatchers.Size()))
		n2, err := m.TagMatchers.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *TagMatchers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagMatchers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TagMatchers) > 0 {
		for _, msg := range m.TagMatchers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TagMatcher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagMatcher) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *FetchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Series) > 0 {
		for _, msg := range m.Series {
			dAtA[i] = 0xa
			i++
			i = encodeVarintQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Series) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Series) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.Meta.Size()))
		n3, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Value != nil {
		nn4, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	return i, nil
}

func (m *Series_Decompressed) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Decompressed != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.Decompressed.Size()))
		n5, err := m.Decompressed.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Series_Compressed) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Compressed != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.Compressed.Size()))
		n6, err := m.Compressed.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *SeriesMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeriesMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func (m *DecompressedSeries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DecompressedSeries) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Datapoints) > 0 {
		for _, msg := range m.Datapoints {
			dAtA[i] = 0xa
			i++
			i = encodeVarintQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0x12
			i++
			i = encodeVarintQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Datapoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Datapoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.Timestamp))
	}
	if m.Value != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i += 8
	}
	return i, nil
}

func (m *Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *M3CompressedSeries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *M3CompressedSeries) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompressedTags) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CompressedTags)))
		i += copy(dAtA[i:], m.CompressedTags)
	}
	if len(m.Replicas) > 0 {
		for _, msg := range m.Replicas {
			dAtA[i] = 0x12
			i++
			i = encodeVarintQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *M3CompressedValuesReplica) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *M3CompressedValuesReplica) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Segments) > 0 {
		for _, msg := range m.Segments {
			dAtA[i] = 0xa
			i++
			i = encodeVarintQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *M3Segments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *M3Segments) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Merged != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.Merged.Size()))
		n7, err := m.Merged.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.Unmerged) > 0 {
		for _, msg := range m.Unmerged {
			dAtA[i] = 0x12
			i++
			i = encodeVarintQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *M3Segment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *M3Segment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Head) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Head)))
		i += copy(dAtA[i:], m.Head)
	}
	if len(m.Tail) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Tail)))
		i += copy(dAtA[i:], m.Tail)
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.StartTime))
	}
	if m.BlockSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockSize))
	}
	return i, nil
}

func (m *SearchRequestOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchRequestOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FilterNameTags) > 0 {
		for _, b := range m.FilterNameTags {
			dAtA[i] = 0xa
			i++
			i = encodeVarintQuery(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *SearchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Matchers != nil {
		nn8, err := m.Matchers.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn8
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.Type))
	}
	if m.Options != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.Options.Size()))
		n9, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *SearchRequest_TagMatchers) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TagMatchers != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.TagMatchers.Size()))
		n10, err := m.TagMatchers.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *M3TagProperty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *M3TagProperty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.CompressedTags) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CompressedTags)))
		i += copy(dAtA[i:], m.CompressedTags)
	}
	return i, nil
}

func (m *M3TagProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *M3TagProperties) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Properties) > 0 {
		for _, msg := range m.Properties {
			dAtA[i] = 0xa
			i++
			i = encodeVarintQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TagProperty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagProperty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Values) > 0 {
		for _, b := range m.Values {
			dAtA[i] = 0x12
			i++
			i = encodeVarintQuery(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *TagProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagProperties) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Properties) > 0 {
		for _, msg := range m.Properties {
			dAtA[i] = 0xa
			i++
			i = encodeVarintQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SearchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn11, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn11
	}
	return i, nil
}

func (m *SearchResponse_Decompressed) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Decompressed != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.Decompressed.Size()))
		n12, err := m.Decompressed.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *SearchResponse_Compressed) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Compressed != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.Compressed.Size()))
		n13, err := m.Compressed.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *CompleteTagsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompleteTagsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Query)))
		i += copy(dAtA[i:], m.Query)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.Type))
	}
	if m.Options != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.Options.Size()))
		n14, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *CompleteTagsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompleteTagsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn15, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn15
	}
	return i, nil
}

func (m *CompleteTagsResponse_Decompressed) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Decompressed != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.Decompressed.Size()))
		n16, err := m.Decompressed.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FetchRequest) Size() (n int) {
	var l int
	_ = l
	if m.Start != 0 {
		n += 1 + sovQuery(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovQuery(uint64(m.End))
	}
	if m.Matchers != nil {
		n += m.Matchers.Size()
	}
	return n
}

func (m *FetchRequest_TagMatchers) Size() (n int) {
	var l int
	_ = l
	if m.TagMatchers != nil {
		l = m.TagMatchers.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}
func (m *TagMatchers) Size() (n int) {
	var l int
	_ = l
	if len(m.TagMatchers) > 0 {
		for _, e := range m.TagMatchers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *TagMatcher) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovQuery(uint64(m.Type))
	}
	return n
}

func (m *FetchResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Series) > 0 {
		for _, e := range m.Series {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *Series) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *Series_Decompressed) Size() (n int) {
	var l int
	_ = l
	if m.Decompressed != nil {
		l = m.Decompressed.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}
func (m *Series_Compressed) Size() (n int) {
	var l int
	_ = l
	if m.Compressed != nil {
		l = m.Compressed.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}
func (m *SeriesMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovQuery(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovQuery(uint64(m.EndTime))
	}
	return n
}

func (m *DecompressedSeries) Size() (n int) {
	var l int
	_ = l
	if len(m.Datapoints) > 0 {
		for _, e := range m.Datapoints {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *Datapoint) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovQuery(uint64(m.Timestamp))
	}
	if m.Value != 0 {
		n += 9
	}
	return n
}

func (m *Tag) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *M3CompressedSeries) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompressedTags)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Replicas) > 0 {
		for _, e := range m.Replicas {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *M3CompressedValuesReplica) Size() (n int) {
	var l int
	_ = l
	if len(m.Segments) > 0 {
		for _, e := range m.Segments {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *M3Segments) Size() (n int) {
	var l int
	_ = l
	if m.Merged != nil {
		l = m.Merged.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Unmerged) > 0 {
		for _, e := range m.Unmerged {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *M3Segment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Head)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Tail)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovQuery(uint64(m.StartTime))
	}
	if m.BlockSize != 0 {
		n += 1 + sovQuery(uint64(m.BlockSize))
	}
	return n
}

func (m *SearchRequestOptions) Size() (n int) {
	var l int
	_ = l
	if len(m.FilterNameTags) > 0 {
		for _, b := range m.FilterNameTags {
			l = len(b)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *SearchRequest) Size() (n int) {
	var l int
	_ = l
	if m.Matchers != nil {
		n += m.Matchers.Size()
	}
	if m.Type != 0 {
		n += 1 + sovQuery(uint64(m.Type))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SearchRequest_TagMatchers) Size() (n int) {
	var l int
	_ = l
	if m.TagMatchers != nil {
		l = m.TagMatchers.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}
func (m *M3TagProperty) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CompressedTags)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *M3TagProperties) Size() (n int) {
	var l int
	_ = l
	if len(m.Properties) > 0 {
		for _, e := range m.Properties {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *TagProperty) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, b := range m.Values {
			l = len(b)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *TagProperties) Size() (n int) {
	var l int
	_ = l
	if len(m.Properties) > 0 {
		for _, e := range m.Properties {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *SearchResponse) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *SearchResponse_Decompressed) Size() (n int) {
	var l int
	_ = l
	if m.Decompressed != nil {
		l = m.Decompressed.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}
func (m *SearchResponse_Compressed) Size() (n int) {
	var l int
	_ = l
	if m.Compressed != nil {
		l = m.Compressed.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}
func (m *CompleteTagsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovQuery(uint64(m.Type))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CompleteTagsResponse) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *CompleteTagsResponse_Decompressed) Size() (n int) {
	var l int
	_ = l
	if m.Decompressed != nil {
		l = m.Decompressed.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FetchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagMatchers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TagMatchers{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Matchers = &FetchRequest_TagMatchers{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagMatchers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagMatchers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagMatchers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagMatchers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagMatchers = append(m.TagMatchers, &TagMatcher{})
			if err := m.TagMatchers[len(m.TagMatchers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagMatcher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagMatcher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagMatcher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MatcherType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Series", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Series = append(m.Series, &Series{})
			if err := m.Series[len(m.Series)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Series) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Series: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Series: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &SeriesMetadata{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decompressed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DecompressedSeries{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Series_Decompressed{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compressed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &M3CompressedSeries{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Series_Compressed{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeriesMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeriesMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeriesMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DecompressedSeries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DecompressedSeries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DecompressedSeries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datapoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datapoints = append(m.Datapoints, &Datapoint{})
			if err := m.Datapoints[len(m.Datapoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Datapoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Datapoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Datapoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *M3CompressedSeries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: M3CompressedSeries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: M3CompressedSeries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressedTags", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompressedTags = append(m.CompressedTags[:0], dAtA[iNdEx:postIndex]...)
			if m.CompressedTags == nil {
				m.CompressedTags = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replicas = append(m.Replicas, &M3CompressedValuesReplica{})
			if err := m.Replicas[len(m.Replicas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *M3CompressedValuesReplica) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: M3CompressedValuesReplica: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: M3CompressedValuesReplica: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segments = append(m.Segments, &M3Segments{})
			if err := m.Segments[len(m.Segments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *M3Segments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: M3Segments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: M3Segments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Merged == nil {
				m.Merged = &M3Segment{}
			}
			if err := m.Merged.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unmerged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unmerged = append(m.Unmerged, &M3Segment{})
			if err := m.Unmerged[len(m.Unmerged)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *M3Segment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: M3Segment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: M3Segment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Head = append(m.Head[:0], dAtA[iNdEx:postIndex]...)
			if m.Head == nil {
				m.Head = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tail", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tail = append(m.Tail[:0], dAtA[iNdEx:postIndex]...)
			if m.Tail == nil {
				m.Tail = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSize", wireType)
			}
			m.BlockSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchRequestOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchRequestOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchRequestOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterNameTags", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilterNameTags = append(m.FilterNameTags, make([]byte, postIndex-iNdEx))
			copy(m.FilterNameTags[len(m.FilterNameTags)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagMatchers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TagMatchers{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Matchers = &SearchRequest_TagMatchers{v}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (SearchType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &SearchRequestOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *M3TagProperty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: M3TagProperty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: M3TagProperty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressedTags", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompressedTags = append(m.CompressedTags[:0], dAtA[iNdEx:postIndex]...)
			if m.CompressedTags == nil {
				m.CompressedTags = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *M3TagProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: M3TagProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: M3TagProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Properties = append(m.Properties, &M3TagProperty{})
			if err := m.Properties[len(m.Properties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagProperty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagProperty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagProperty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, make([]byte, postIndex-iNdEx))
			copy(m.Values[len(m.Values)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Properties = append(m.Properties, &TagProperty{})
			if err := m.Properties[len(m.Properties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decompressed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TagProperties{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &SearchResponse_Decompressed{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compressed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &M3TagProperties{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &SearchResponse_Compressed{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompleteTagsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompleteTagsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompleteTagsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = append(m.Query[:0], dAtA[iNdEx:postIndex]...)
			if m.Query == nil {
				m.Query = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (SearchType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &SearchRequestOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompleteTagsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompleteTagsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompleteTagsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decompressed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TagProperties{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &CompleteTagsResponse_Decompressed{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQuery(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQuery = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/query/generated/proto/rpcpb/query.proto", fileDescriptorQuery)
}

var fileDescriptorQuery = []byte{
	// 1003 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0xce, 0x78, 0x6c, 0xc7, 0x2e, 0xff, 0xc4, 0x54, 0x22, 0xd6, 0x89, 0x22, 0x2b, 0xea, 0x45,
	0x21, 0x0a, 0x92, 0x1d, 0xec, 0x15, 0x7f, 0x12, 0x0b, 0x0e, 0xeb, 0x4d, 0x90, 0xd6, 0xc9, 0x6e,
	0x7b, 0x16, 0x05, 0xb4, 0x07, 0xda, 0xe3, 0xc6, 0x19, 0xad, 0xc7, 0x33, 0x3b, 0xd3, 0x46, 0x6b,
	0xee, 0x9c, 0xb8, 0xf0, 0x1e, 0x5c, 0xe1, 0x1d, 0x38, 0xf2, 0x08, 0x28, 0xbc, 0x08, 0x9a, 0x9e,
	0x9e, 0x3f, 0xdb, 0xa0, 0x95, 0x10, 0xb7, 0xae, 0xaa, 0xaf, 0xab, 0xab, 0xbe, 0xfe, 0xa6, 0x7a,
	0xe0, 0xe1, 0xd4, 0x12, 0xb7, 0x8b, 0x71, 0xdb, 0x74, 0xec, 0x8e, 0xdd, 0x9b, 0x8c, 0x3b, 0x76,
	0xaf, 0xe3, 0x7b, 0x66, 0xe7, 0xd5, 0x82, 0x7b, 0xcb, 0xce, 0x94, 0xcf, 0xb9, 0xc7, 0x04, 0x9f,
	0x74, 0x5c, 0xcf, 0x11, 0x4e, 0xc7, 0x73, 0x4d, 0x77, 0x1c, 0xc6, 0xda, 0xd2, 0x83, 0xba, 0xe7,
	0x9a, 0xe4, 0x35, 0x54, 0x1f, 0x73, 0x61, 0xde, 0x52, 0xfe, 0x6a, 0xc1, 0x7d, 0x81, 0x7b, 0x50,
	0xf0, 0x05, 0xf3, 0x44, 0x53, 0x3b, 0xd2, 0x4e, 0x74, 0x1a, 0x1a, 0xd8, 0x00, 0x9d, 0xcf, 0x27,
	0xcd, 0x9c, 0xf4, 0x05, 0x4b, 0x7c, 0x00, 0x15, 0xc1, 0xa6, 0x43, 0x26, 0xcc, 0x5b, 0xee, 0xf9,
	0x4d, 0xfd, 0x48, 0x3b, 0xa9, 0x74, 0x1b, 0x6d, 0xcf, 0x35, 0xdb, 0x46, 0xe2, 0xbf, 0xdc, 0xa2,
	0x69, 0xd8, 0x39, 0x40, 0xc9, 0x56, 0x6b, 0xf2, 0x39, 0x54, 0x52, 0x48, 0x7c, 0x3f, 0x9b, 0x50,
	0x3b, 0xd2, 0x4f, 0x2a, 0xdd, 0x9d, 0x95, 0x84, 0x99, 0x6c, 0xe4, 0x05, 0x40, 0x12, 0x42, 0x84,
	0xfc, 0x9c, 0xd9, 0x5c, 0x16, 0x5e, 0xa5, 0x72, 0x1d, 0x74, 0xf3, 0x3d, 0x9b, 0x2d, 0xb8, 0xac,
	0xbc, 0x4a, 0x43, 0x03, 0xdf, 0x81, 0xbc, 0x58, 0xba, 0x5c, 0x16, 0x5d, 0x57, 0x45, 0xab, 0x2c,
	0xc6, 0xd2, 0xe5, 0x54, 0x46, 0xc9, 0x03, 0xa8, 0x29, 0x66, 0x7c, 0xd7, 0x99, 0xfb, 0x1c, 0xef,
	0x43, 0xd1, 0xe7, 0x9e, 0xc5, 0xa3, 0xe2, 0x2a, 0x72, 0xe3, 0x48, 0xba, 0xa8, 0x0a, 0x91, 0x5f,
	0x35, 0x28, 0x86, 0x2e, 0x7c, 0x17, 0xf2, 0x36, 0x17, 0x4c, 0x16, 0x54, 0xe9, 0xee, 0xa6, 0xd0,
	0x43, 0x2e, 0xd8, 0x84, 0x09, 0x46, 0x25, 0x00, 0x3f, 0x85, 0xea, 0x84, 0x9b, 0x8e, 0xed, 0x7a,
	0xdc, 0xf7, 0x79, 0x48, 0x73, 0xa5, 0x7b, 0x4f, 0x6e, 0x78, 0x94, 0x0a, 0x84, 0x9b, 0x2f, 0xb7,
	0x68, 0x06, 0x8e, 0x1f, 0x03, 0xa4, 0x36, 0xeb, 0xa9, 0xcd, 0xc3, 0xde, 0x17, 0xeb, 0x9b, 0x53,
	0xe0, 0xf3, 0x6d, 0xc5, 0x0f, 0xb9, 0x81, 0x7a, 0xb6, 0x34, 0xac, 0x43, 0xce, 0x9a, 0x28, 0x32,
	0x73, 0xd6, 0x04, 0x0f, 0xa1, 0x2c, 0xb5, 0x60, 0x58, 0x36, 0x57, 0x42, 0x48, 0x1c, 0xd8, 0x84,
	0x6d, 0x3e, 0x9f, 0xc8, 0x98, 0x2e, 0x63, 0x91, 0x49, 0xc6, 0x80, 0xeb, 0x3d, 0x60, 0x1b, 0x20,
	0x38, 0xc5, 0x75, 0xac, 0xb9, 0x88, 0xf8, 0xac, 0x87, 0x0d, 0x47, 0x6e, 0x9a, 0x42, 0xe0, 0x21,
	0xe4, 0x05, 0x9b, 0xfa, 0xcd, 0x9c, 0x44, 0x96, 0x22, 0x59, 0x50, 0xe9, 0x25, 0x9f, 0x41, 0x39,
	0xde, 0x16, 0x14, 0x2a, 0x2c, 0x9b, 0xfb, 0x82, 0xd9, 0xae, 0x52, 0x71, 0xe2, 0xc8, 0x2a, 0x42,
	0x53, 0x8a, 0x20, 0x1d, 0xd0, 0x0d, 0x36, 0x7d, 0x73, 0x09, 0x91, 0xd7, 0x80, 0xeb, 0xe4, 0xe2,
	0x31, 0xd4, 0x93, 0x4e, 0x8d, 0xa0, 0xde, 0x30, 0xd3, 0x8a, 0x17, 0x3f, 0x81, 0x92, 0xc7, 0xdd,
	0x99, 0x65, 0xb2, 0xa8, 0xa3, 0xd6, 0xda, 0x7d, 0x7d, 0x15, 0x9c, 0xe3, 0xd3, 0x10, 0x46, 0x63,
	0x3c, 0xb9, 0x84, 0xfd, 0x7f, 0x84, 0xe1, 0x7b, 0x50, 0xf2, 0xf9, 0xd4, 0xe6, 0x09, 0xa9, 0x3b,
	0x2a, 0xf1, 0x48, 0xb9, 0x69, 0x0c, 0x20, 0xdf, 0x02, 0x24, 0x7e, 0x3c, 0x86, 0xa2, 0xcd, 0xbd,
	0x29, 0x9f, 0x28, 0xbd, 0xd6, 0xb3, 0x1b, 0xa9, 0x8a, 0xe2, 0x29, 0x94, 0x16, 0x73, 0x85, 0xcc,
	0xa5, 0xee, 0x2d, 0x41, 0xc6, 0x71, 0xe2, 0x40, 0x39, 0x76, 0x07, 0xe4, 0xde, 0x72, 0x16, 0x49,
	0x4a, 0xae, 0x03, 0x9f, 0x60, 0xd6, 0x4c, 0x71, 0x2b, 0xd7, 0x59, 0xa1, 0xe9, 0xab, 0x42, 0x3b,
	0x84, 0xf2, 0x78, 0xe6, 0x98, 0x2f, 0x47, 0xd6, 0x0f, 0xbc, 0x99, 0x0f, 0xa3, 0xb1, 0x83, 0x3c,
	0x84, 0xbd, 0x11, 0x67, 0x5e, 0x3c, 0xce, 0xae, 0x5d, 0x61, 0x39, 0x73, 0x79, 0x31, 0xdf, 0x59,
	0x33, 0xc1, 0xbd, 0x2b, 0x66, 0x73, 0x75, 0x31, 0x7a, 0x70, 0x31, 0x59, 0x2f, 0xf9, 0x45, 0x83,
	0x5a, 0x26, 0xc1, 0xea, 0x9c, 0xd3, 0xde, 0x68, 0xce, 0xe1, 0x7d, 0x35, 0x61, 0x72, 0x72, 0xc2,
	0xec, 0xa8, 0x4f, 0x3f, 0xc8, 0x9b, 0x0c, 0x18, 0xec, 0xc1, 0xb6, 0x13, 0xd6, 0xa7, 0x3e, 0xda,
	0xfd, 0x14, 0x2e, 0xdb, 0x00, 0x8d, 0x90, 0x99, 0x09, 0x7a, 0x01, 0xb5, 0x61, 0xcf, 0x60, 0xd3,
	0xa7, 0x9e, 0xe3, 0x72, 0x4f, 0x2c, 0xd7, 0xbe, 0xd9, 0x75, 0x3d, 0xe6, 0x36, 0xe9, 0x91, 0x0c,
	0x60, 0x27, 0x9d, 0x28, 0x90, 0x72, 0x17, 0xc0, 0x8d, 0x2d, 0xa5, 0x25, 0x54, 0x17, 0x9d, 0x3a,
	0x92, 0xa6, 0x50, 0xe4, 0x43, 0x39, 0xd1, 0xe3, 0x6a, 0x1a, 0xa0, 0xbf, 0xe4, 0x4b, 0x55, 0x4e,
	0xb0, 0xc4, 0xb7, 0xa1, 0x28, 0x3f, 0x9f, 0x50, 0xf5, 0x55, 0xaa, 0x2c, 0xd2, 0x87, 0x5a, 0xf6,
	0xf4, 0xb3, 0x0d, 0xa7, 0xc7, 0xa4, 0x6f, 0x3c, 0xfb, 0x27, 0x2d, 0x98, 0x60, 0x21, 0x73, 0x6a,
	0x5e, 0x7f, 0xb4, 0x32, 0x56, 0xc3, 0xbb, 0xc3, 0x95, 0x34, 0x9b, 0x26, 0xea, 0x07, 0x99, 0x89,
	0x1a, 0x8e, 0xe3, 0xbd, 0xb5, 0xe6, 0xff, 0x65, 0x9c, 0xfe, 0xa8, 0xc1, 0x6e, 0xf0, 0x8d, 0xce,
	0xb8, 0x90, 0xc2, 0x4a, 0xbd, 0xae, 0xf2, 0x05, 0x56, 0xa4, 0x84, 0xc6, 0xff, 0xa7, 0x16, 0xf2,
	0x35, 0xec, 0x65, 0xcb, 0xf8, 0xaf, 0xd4, 0xc4, 0x2d, 0x9e, 0xbe, 0x80, 0x4a, 0xea, 0xcd, 0xc4,
	0x32, 0x14, 0x06, 0xcf, 0x9e, 0xf7, 0x9f, 0x34, 0xb6, 0xb0, 0x0a, 0xa5, 0xab, 0x6b, 0x23, 0xb4,
	0x34, 0x04, 0x28, 0xd2, 0xc1, 0xc5, 0xe0, 0xe6, 0x69, 0x23, 0x87, 0x35, 0x28, 0x5f, 0x5d, 0x1b,
	0xca, 0xd4, 0x83, 0xd0, 0xe0, 0xe6, 0xcb, 0x91, 0x31, 0x6a, 0xe4, 0x55, 0x48, 0x99, 0x85, 0xd3,
	0x63, 0x80, 0x84, 0x01, 0xac, 0xc0, 0xf6, 0xa3, 0xc1, 0xe3, 0xfe, 0xf3, 0x27, 0x46, 0x63, 0x2b,
	0x30, 0x8c, 0xfe, 0xc5, 0x55, 0x7f, 0x38, 0x68, 0x68, 0xdd, 0xdf, 0x34, 0x28, 0x3c, 0x93, 0x24,
	0x9e, 0x41, 0x41, 0x3e, 0xd7, 0xf8, 0x96, 0xec, 0x22, 0xfd, 0x53, 0x73, 0x80, 0x69, 0x57, 0x48,
	0xc1, 0x99, 0x86, 0xbd, 0xe0, 0xa5, 0x0e, 0xce, 0x40, 0x5c, 0xa7, 0xf2, 0x60, 0x37, 0xe3, 0x8b,
	0x37, 0x0d, 0xa0, 0x9a, 0x66, 0x14, 0x9b, 0x12, 0xb6, 0xe1, 0xae, 0x0f, 0xf6, 0x37, 0x44, 0xa2,
	0x34, 0xe7, 0xf7, 0x7e, 0xbf, 0x6b, 0x69, 0x7f, 0xdc, 0xb5, 0xb4, 0x3f, 0xef, 0x5a, 0xda, 0xcf,
	0x7f, 0xb5, 0xb6, 0xbe, 0x29, 0xc8, 0x1f, 0xb4, 0x71, 0x51, 0xfe, 0x9b, 0xf5, 0xfe, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0xaa, 0xc4, 0x5e, 0x0b, 0xdd, 0x09, 0x00, 0x00,
}
